apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kafka-exporter.fullname" . }}
  labels:
    {{- include "kafka-exporter.labels" . | nindent 4 }}
    {{- if .Values.labels }}
    {{ toYaml .Values.labels | nindent 4 }}
    {{- end }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "kafka-exporter.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- if eq .Values.datadog.use_datadog true }}
      annotations:
        ad.datadoghq.com/{{ .Chart.Name }}.check_names: |
          ["openmetrics"]
        ad.datadoghq.com/{{ .Chart.Name }}.init_configs: |
            [{}]
        ad.datadoghq.com/{{ .Chart.Name }}.instances: |
          [
            {
              "openmetrics_endpoint": "http://{{ include "kafka-exporter.fullname" . }}:{{ .Values.service.port }}/metrics",
              "namespace": "{{ .Values.datadog.prefix }}",
              "metrics": {{ .Values.datadog.metrics | toJson | nindent 16 -}}
            }
           ]
      {{- end }}    
      labels:
        {{- include "kafka-exporter.selectorLabels" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{ toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kafka-exporter.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            {{- with .Values.kafkaExporter }}
              {{- /* Kafka */}}
              {{- with .kafka }}
                {{- range .servers }}
            - --kafka.server={{ . }}
                {{- end }}
                {{- if .version }}
            - --kafka.version={{ .version }}
                {{- end }}
                {{- if .labels }}
            - --kafka.labels={{ .labels }}
                {{- end }}
              {{- end }}
              {{- /* SASL */}}
              {{- with .sasl }}
                {{- if .enabled }}
            - --sasl.enabled
                  {{- if not .handshake }}
            - --sasl.handshake=false
                  {{- end }}
            - --sasl.username={{ .username }}
            - --sasl.password={{ .password }}
            - --sasl.mechanism={{ .mechanism }}
                  {{- if .serviceName }}
            - --sasl.service-name={{ .serviceName }}
                  {{- end }}
                  {{- if .kerberosConfigPath }}
            - --sasl.kerberos-config-path={{ .kerberosConfigPath }}
                  {{- end }}
                  {{- if .realm }}
            - --sasl.realm={{ .realm }}
                  {{- end }}
                  {{- if .keytabPath }}
            - --sasl.keytab-path={{ .keytabPath }}
                  {{- end }}
                  {{- if .kerberosAuthType }}
            - --sasl.kerberos-auth-type={{ .kerberosAuthType }}
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- /* TLS */}}
              {{- with .tls }}
                {{- if .enabled }}
            - --tls.enabled
                  {{- if .insecureSkipTlsVerify }}
            - --tls.insecure-skip-tls-verify
                  {{- else }}
                    {{- if .serverName }}
            - --tls.server-name={{ .serverName }}
                    {{- end }}
            - --tls.ca-file=/etc/tls-certs/ca-file
            - --tls.cert-file=/etc/tls-certs/cert-file
            - --tls.key-file=/etc/tls-certs/key-file
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- /* Filters */}}
              {{- with .filter }}
                {{- if .topic }}
            - --topic.filter={{ .topic }}
                {{- end }}
                {{- if .group }}
            - --group.filter={{ .group }}
                {{- end }}
              {{- end }}
              {{- /* Web */}}
              {{- with .web }}
                {{- if .listenAddress }}
            - --listen-address={{ .listenAddress }}
                {{- end }}
                {{- if .telemetryPath }}
            - --telemetry-path={{ .telemetryPath }}
                {{- end }}
              {{- end }}
              {{- /* ZooKeeper */}}
              {{- with .zookeeper }}
                {{- if .consumelag }}
            - --use.consumelag.zookeeper
                {{- end }}
                {{- range .servers }}
            - --zookeeper.server={{ . }}
                {{- end }}
              {{- end }}
              {{- /* Refresh */}}
              {{- with .refresh }}
                {{- if .metadata }}
            - --refresh.metadata={{ .metadata }}
                {{- end }}
              {{- end }}
              {{- /* Offset */}}
              {{- with .offset }}
                {{- if not .showAll }}
            - --offset.show-all
                {{- end }}
              {{- end }}
              {{- /* Concurrent */}}
              {{- with .concurrent }}
                {{- if .enable }}
            - --concurrent.enable
                {{- end }}
              {{- end }}
              {{- /* Topic */}}
              {{- with .topic }}
                {{- if .workers }}
            - --topic.workers={{ .workers }}
                {{- end }}
              {{- end }}
              {{- /* Log */}}
              {{- with .log }}
                {{- if .verbosity }}
            - --verbosity={{ .verbosity }}
                {{- end }}
                {{- if .enableSarama }}
            - --log.enable-sarama
                {{- end }}
              {{- end }}
            {{- end }}
          ports:
            - name: metrics
              containerPort: 9308
              protocol: TCP
          livenessProbe:
            failureThreshold: 1
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 9
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 9
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if and .Values.kafkaExporter.tls.enabled (not .Values.kafkaExporter.tls.insecureSkipTlsVerify) }}
          volumeMounts:
            - name: tls-certs
              mountPath: /etc/tls-certs/
              readOnly: true
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- if and .Values.kafkaExporter.tls.enabled (not .Values.kafkaExporter.tls.insecureSkipTlsVerify) }}
      volumes:
        - name: tls-certs
          secret:
            secretName: {{ include "kafka-exporter.fullname" . }}
    {{- end }}
